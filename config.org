* Custom Functions
#+begin_src emacs-lisp
(defun insert-line-above (times)
  "Insert a newline above the line containing the cursor."
  (interactive "p")
  (save-excursion
    (move-beginning-of-line 1)
    (newline times)))

(defun join-line-below (times)
  "joins the next line into the line containing the cursor."
  (interactive "p")
  (save-excursion
    (next-line times)
    (dotimes (x times)
      (join-line))))

(defun open-emacs-init-el ()
  "open the .emacs.d/init.el configuration file"
  (interactive)
  (find-file (concat user-emacs-directory "config.org")))
#+end_src

* Keybindings
#+begin_src emacs-lisp
(setq mac-option-modifier 'meta)
(setq mac-command-modifier 'super)
(setq mac-pass-command-to-system nil)
(global-set-key (kbd "C-c i") 'open-emacs-init-el)
(global-set-key (kbd "<f5>") 'recompile)
#+end_src

* Appearance
#+begin_src emacs-lisp
(use-package spacemacs-theme
  :init
    (load-theme 'spacemacs-dark t))

(set-face-attribute 'default nil :height 140)
#+end_src

* Packages

** Avy
#+begin_src emacs-lisp
(req-package avy
  :bind
    ("C-;" . avy-goto-char)
    ("C-:" . avy-goto-char-2))
#+end_src

** Buffer Move
#+begin_src emacs-lisp
(req-package buffer-move
  :bind
    ("<C-S-up>"    . buf-move-up)
    ("<C-S-down>"  . buf-move-down)
    ("<C-S-left>"  . buf-move-left)
    ("<C-S-right>" . buf-move-right))
#+end_src

** Compilation
#+begin_src emacs-lisp
(req-package compile
  :init
    (setq compilation-scroll-output t)
    (add-hook 'compilation-mode-hook 'toggle-truncate-lines))
#+end_src

** Company Mode
#+begin_src emacs-lisp
(req-package company)
(req-package company-ghc
  :require company
  :init
    (add-to-list 'company-backends 'company-ghc))
#+end_src

** Calender
#+begin_src emacs-lisp
(req-package calendar
  :init
    (setq calendar-date-style 'european
          calendar-date-display-form '(day "." month "." year)))
#+end_src

** Doc-View
#+begin_src emacs-lisp
(req-package doc-view
  :init
    (setq doc-view-ghostscript-program
        (concat (getenv "HOME") "/.nix-profile/bin/gs")))
#+end_src

** EasyPG
#+begin_src emacs-lisp
(req-package epa-file)
(req-package epa
  :require epa-file)
#+end_src

** Email
#+begin_src emacs-lisp
(req-package gnus
  :init
    (setq user-mail-address "svenkeidel@gmail.com"
          user-full-name "Sven Keidel"
          gnus-select-method
            '(nnimap "gmail"
                     (nnimap-address "imap.gmail.com")
                     (nnimap-server-port "imaps")
                     (nnimap-stream ssl))))
#+end_src

** Flycheck

#+begin_src emacs-lisp
(req-package flycheck
  :require nix-sandbox
  :init
    (setq flycheck-command-wrapper-function
            (lambda (command) (apply 'nix-shell-command (nix-current-sandbox) command))
          flycheck-executable-find
            (lambda (cmd) (nix-executable-find (nix-current-sandbox) cmd))))
#+end_src

** Flyspell

#+begin_src emacs-lisp
(req-package flyspell
  :init
    (setq flyspell-auto-correct-binding (kbd "C-c s"))
    (setq ispell-program-name (format "%s/.nix-profile/bin/aspell" (getenv "HOME")))
    (setenv "ASPELL_CONF" (format "data-dir %s/.nix-profile/lib/aspell" (getenv "HOME"))))
#+end_src

** Haskell
#+begin_src emacs-lisp
(req-package haskell-mode
  :require flycheck ;; smartparens nix-sandbox
  :init
    (setq haskell-process-type 'cabal-repl
          haskell-tags-on-save t
          haskell-process-wrapper-function
            '(lambda (args) (apply 'nix-shell-command (nix-current-sandbox) args)))
    (add-hook 'haskell-mode-hook 'flycheck-mode)
    (add-hook 'haskell-mode-hook 'smartparens-strict-mode)
    (add-hook 'haskell-mode-hook 'haskell-indent-mode)
    (add-hook 'haskell-mode-hook 'linum-mode)
  :config
    (define-key haskell-mode-map (kbd "M-.") 'haskell-mode-jump-to-def-or-tag)
    (define-key haskell-mode-map (kbd "C-c C-l") 'haskell-process-load-or-reload)
    (define-key haskell-mode-map (kbd "C-`") 'haskell-interactive-bring)
    (define-key haskell-mode-map (kbd "C-c C-t") 'haskell-process-do-type)
    (define-key haskell-mode-map (kbd "C-c C-i") 'haskell-process-do-info)
    (define-key haskell-mode-map (kbd "C-c C-c") 'haskell-process-cabal-build)
    (define-key haskell-mode-map (kbd "C-c C-k") 'haskell-interactive-mode-clear)
    (define-key haskell-mode-map (kbd "C-c c") 'haskell-process-cabal)
    (define-key haskell-mode-map (kbd "SPC") 'haskell-mode-contextual-space))

(req-package helm-hayoo
  :require haskell-mode
  :config
    (define-key haskell-mode-map (kbd "C-c y") 'helm-hayoo))
#+end_src

** Helm
#+begin_src emacs-lisp
(req-package helm-config)
(req-package-force helm
  :require helm-config
  :diminish helm-mode
  :init
    (setq helm-move-to-line-cycle-in-source t)
    (helm-mode 1)
  :bind
    ("M-x"   . helm-M-x)
    ("C-c h" . helm-command-prefix)
    ("C-x b" . helm-mini))
#+end_src

** Info
#+begin_src emacs-lisp
(req-package info
  :init
    (add-to-list 'Info-directory-list "/home/sven/.nix-profile/share/info/"))
#+end_src

** LaTeX Mode
#+begin_src emacs-lisp
  (req-package tex-mode
    :init
      (setq TeX-PDF-mode t)
      (setq TeX-command-extra-options (list "-shell-escape"))
      (add-hook 'latex-mode-hook 'flycheck-mode)
      (add-hook 'latex-mode-hook 'flyspell-mode)
      (add-hook 'latex-mode-hook 'turn-on-reftex)
      (add-hook 'latex-mode-hook 'smartparens-strict-mode)
      (add-hook 'latex-mode-hook 'auto-fill-mode)
      (add-hook 'latex-mode-hook
        (lambda ()
          (dolist (x '(("\\alpha" . ?α)
                       ("\\beta" . ?β)
                       ("\\gamma" . ?γ)
                       ("\\Gamma" . ?Γ)
                       ("\\delta" . ?δ)
                       ("\\Delta" . ?Δ)
                       ("\\epsilon" . ?ϵ)
                       ("\\varepsilon" . ?ε)
                       ("\\zeta" . ?ζ)
                       ("\\eta" . ?η)
                       ("\\theta" . ?θ)
                       ("\\vartheta" . ?ϑ)
                       ("\\Theta" . ?Θ)
                       ("\\iota" . ?ι)
                       ("\\kappa" . ?κ)
                       ("\\lambda" . ?λ)
                       ("\\Lambda" . ?Λ)
                       ("\\mu" . ?μ)
                       ("\\nu" . ?ν)
                       ("\\xi" . ?ξ)
                       ("\\Xi" . ?Ξ)
                       ("\\pi" . ?π)
                       ("\\varpi" . ?ϖ)
                       ("\\Pi" . ?Π)
                       ("\\rho" . ?ρ)
                       ("\\varrho" . ?ϱ)
                       ("\\sigma" . ?σ)
                       ("\\varsigma" . ?ς)
                       ("\\Sigma" . ?Σ)
                       ("\\tau" . ?τ)
                       ("\\upsilon" . ?υ)
                       ("\\Upsilon" . ?ϒ)
                       ("\\phi" . ?ϕ)
                       ("\\varphi" . ?φ)
                       ("\\Phi" . ?Φ)
                       ("\\psi" . ?ψ)
                       ("\\Psi" . ?Ψ)
                       ("\\omega" . ?ω)
                       ("\\Omega" . ?Ω)))
            (push x prettify-symbols-alist)))
        (prettify-symbols-mode 1)))
#+end_src

** Lisp Mode
#+begin_src emacs-lisp
(req-package lisp-mode
  :require smartparens
  :config
    (add-hook 'emacs-lisp-mode-hook
              'smartparens-strict-mode)
    (sp-local-pair 'emacs-lisp-mode "'" nil :actions nil))
#+end_src

** Magit
#+begin_src emacs-lisp
(req-package magit
  :bind
    ("C-x s" . magit-status))
#+end_src

** NixOS
#+begin_src emacs-lisp
(req-package nix-mode)
(req-package nix-sandbox)
#+end_src

** Org Mode
#+begin_src emacs-lisp
(req-package org
  :init
    (setq org-src-preserve-indentation t
          org-src-fontify-natively t)
    (add-hook 'org-mode-hook 'flyspell-mode)
  :bind
    ("C-c l" . org-store-link)
    ("C-c a" . org-agenda)
    ("C-c c" . org-capture)
    ("C-c b" . org-iswitchb))
#+end_src

** PDF-Tools
#+begin_src emacs-lisp
(req-package pdf-tools
  :init
    (setq pdf-view-midnight-colors (cons (face-attribute 'default :foreground) (face-attribute 'default :background)))
    (add-hook 'pdf-view-mode-hook 'auto-revert-mode)
  :config
    (pdf-tools-install))
#+end_src

** Projectile
#+begin_src emacs-lisp
(req-package projectile
  :init
    (setq projectile-enable-caching t
          projectile-completion-system 'helm)
  :config
    (projectile-global-mode))
#+end_src

** Rainbow delimiter
#+begin_src emacs-lisp
(req-package rainbow-delimiters
  :diminish rainbow-delimiters-mode
  :init
    (add-hook 'emacs-lisp-mode-hook
              'rainbow-delimiters-mode))
#+end_src

** Shell
#+begin_src emacs-lisp
(req-package shell
  :init
  (setq system-uses-terminfo nil)
  (add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on))
#+end_src

** Smart Parens

*** TODO add keybindings for most common smartparen functions

*** Code
#+begin_src emacs-lisp
(req-package smartparens
  :config
  (require 'smartparens-config)
  (sp-use-smartparens-bindings)
    ;; (define-key sp-keymap (kbd "C-M-f") 'sp-forward-sexp)
    ;; ;; (define-key sp-keymap (kbd "C-S-f") 'sp-end-of-next-sexp)
    ;; (define-key sp-keymap (kbd "C-M-b") 'sp-backward-sexp)
    ;; ;; (define-key sp-keymap (kbd "C-S-b") 'sp-end-of-previous-sexp)
    ;; (define-key sp-keymap (kbd "C-M-n") 'sp-next-sexp)
    ;; ;; (define-key sp-keymap (kbd "C-S-n") 'sp-beginning-of-next-sexp)
    ;; (define-key sp-keymap (kbd "C-M-p") 'sp-previous-sexp)
    ;; ;; (define-key sp-keymap (kbd "C-S-p") 'sp-beginning-of-previous-sexp)
    ;; (define-key sp-keymap (kbd "C-M-d") 'sp-down-sexp)
    ;; ;; (define-key sp-keymap (kbd "C-S-d") 'sp-backward-down-sexp)
    ;; (define-key sp-keymap (kbd "C-M-a") 'sp-beginning-of-sexp)
    ;; (define-key sp-keymap (kbd "C-M-e") 'sp-end-of-sexp)
    ;; (define-key sp-keymap (kbd "C-<right>") 'sp-forward-slurp-sexp)
    ;; (define-key sp-keymap (kbd "C-<left>") 'sp-forward-barf-sexp)
    ;; (define-key sp-keymap (kbd "C-M-<left>") 'sp-backward-slurp-sexp)
    ;; (define-key sp-keymap (kbd "C-M-<right>") 'sp-backward-barf-sexp)
    ;; (define-key sp-keymap (kbd "C-<right_bracket>") 'sp-select-next-thing-exchange)
    ;; (define-key sp-keymap (kbd "C-<left_bracket>") 'sp-select-previous-thing)
    ;; (define-key sp-keymap (kbd "C-M-<right_bracket>") 'sp-select-next-thing)
    )
#+end_src

** Speedbar
#+begin_src emacs-lisp
(req-package speedbar
  :config
  (speedbar-add-supported-extension ".hs"))
#+end_src

** Twittering Mode
#+begin_src emacs-lisp
(req-package twittering-mode
  :require epa
  :init
    (advice-add 'twittering-capable-of-encryption-p
      :around (lambda (fun &rest args) t))
    (setq twittering-use-master-password t
          twittering-username "svenkeidel@gmail.com"))
#+end_src

** W3M
#+begin_src emacs-lisp
(req-package w3m
  :commands (w3m-browse-url)
  :init (setq browse-url-browser-function 'w3m-browse-url))
#+end_src

** Winner Mode
#+begin_src emacs-lisp
(winner-mode 1)
#+end_src

** Whitespace Config
#+begin_src emacs-lisp
(req-package-force whitespace
  :diminish global-whitespace-mode
  :init
  (setq whitespace-line-column 80
        whitespace-style '(face empty tabs lines-tail trailing)
        fill-column 80)
  (setq-default indent-tabs-mode nil)
  :config
    (global-whitespace-mode 1))
#+end_src
