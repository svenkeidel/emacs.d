* Use-Package
#+begin_src emacs-lisp
(setq use-package-always-ensure t)
#+end_src

* Custom Functions
#+begin_src emacs-lisp
(defun insert-line-above (times)
  "Insert a newline above the line containing the cursor."
  (interactive "p")
  (save-excursion
    (move-beginning-of-line 1)
    (newline times)))

(defun join-line-below (times)
  "joins the next line into the line containing the cursor."
  (interactive "p")
  (save-excursion
    (next-line times)
    (dotimes (x times)
      (join-line))))

(defun open-emacs-init-el ()
  "open the .emacs.d/init.el configuration file"
  (interactive)
  (find-file (concat user-emacs-directory "config.org")))
#+end_src

* Keybindings
#+begin_src emacs-lisp
(global-set-key (kbd "C-c i") 'open-emacs-init-el)
(global-set-key (kbd "<f5>") 'recompile)
#+end_src

* Apperance
#+begin_src emacs-lisp
(use-package spacemacs-theme
  :init
    (load-theme 'spacemacs-dark t))

(use-package org
  :init
    (setq org-src-fontify-natively t))

(set-face-attribute 'default nil :height 140)
#+end_src

* Packages

** Avy
#+bepgin_src emacs-lisp
(use-package avy
  :bind
    ("C-;" . avy-goto-char)
    ("C-:" . avy-goto-char-2))
#+end_src

** Buffer Move
#+begin_src emacs-lisp
(use-package buffer-move
  :bind
    ("<C-S-up>"    . buf-move-up)
    ("<C-S-down>"  . buf-move-down)
    ("<C-S-left>"  . buf-move-left)
    ("<C-S-right>" . buf-move-right))
#+end_src

** Compilation
#+begin_src emacs-lisp
(use-package compile
  :init
    (setq compilation-scroll-output t)
    (add-hook 'compilation-mode-hook 'toggle-truncate-lines))
#+end_src

** EasyPG
#+begin_src emacs-lisp
(use-package epa
  :init
    (require 'epa-file)
    (epa-file-enable))
#+end_src

** Flycheck

#+begin_src emacs-lisp
(use-package flycheck
  :ensure nil
  :defer t
  :pin manual
  :init
    (setq flycheck-command-wrapper-function
            (lambda (command) (apply 'nix-shell-command (nixos-current-sandbox) command))
          flycheck-executable-find
            (lambda (cmd) (nixos-executable-find (nixos-current-sandbox) cmd))))
#+end_src

** Flyspell

#+begin_src emacs-lisp
(use-package flyspell
  :init
    (setq ispell-program-name "/home/sven/.nix-profile/bin/aspell")
    (setenv "ASPELL_CONF" "dict-dir /home/sven/.nix-profile/lib/aspell"))
#+end_src

** Haskell
*** Haskell Mode
#+begin_src emacs-lisp
(use-package haskell-mode
  :ensure t
  :init
    (setq haskell-process-type 'cabal-repl
          haskell-tags-on-save t
          haskell-process-wrapper-function
            '(lambda (args) (apply 'nix-shell-command (nixos-current-sandbox) args)))
    (add-hook 'haskell-mode-hook 'flycheck-mode)
    (add-hook 'haskell-mode-hook 'smartparens-strict-mode)
    (add-hook 'haskell-mode-hook 'haskell-indent-mode)
  :config
    (define-key haskell-mode-map (kbd "M-.") 'haskell-mode-jump-to-def-or-tag)
    (define-key haskell-mode-map (kbd "C-c C-l") 'haskell-process-load-or-reload)
    (define-key haskell-mode-map (kbd "C-`") 'haskell-interactive-bring)
    (define-key haskell-mode-map (kbd "C-c C-t") 'haskell-process-do-type)
    (define-key haskell-mode-map (kbd "C-c C-i") 'haskell-process-do-info)
    (define-key haskell-mode-map (kbd "C-c C-c") 'haskell-process-cabal-build)
    (define-key haskell-mode-map (kbd "C-c C-k") 'haskell-interactive-mode-clear)
    (define-key haskell-mode-map (kbd "C-c c") 'haskell-process-cabal)
    (define-key haskell-mode-map (kbd "SPC") 'haskell-mode-contextual-space))

(use-package helm-hayoo
  :config
    (define-key haskell-mode-map (kbd "C-c y") 'helm-hayoo))
#+end_src

*** Structured Haskell Mode
#+begin_src emacs-lisp
(use-package shm
  :disabled t
  :load-path "structured-haskell-mode/elisp/"
  :diminish structured-haskell-mode
  :bind ("C-c C-s" . shm/case-split)
  :init
    (setq shm-program-name
          (concat user-emacs-directory
                  "structured-haskell-mode/.cabal-sandbox/bin/structured-haskell-mode"))
    (add-hook 'haskell-mode-hook 'structured-haskell-mode))
#+end_src

** Helm
#+begin_src emacs-lisp
(use-package helm
  :demand t
  :diminish helm-mode
  :init
    (setq helm-move-to-line-cycle-in-source t)
  :bind
    ("M-x"   . helm-M-x)
    ("C-c h" . helm-command-prefix)
    ("C-x b" . helm-mini)
  :config
    (require 'helm-config)
    (helm-mode 1))
#+end_src

** Info
#+begin_src emacs-lisp
(use-package info
  :config
    (add-to-list 'Info-directory-list "/home/sven/.nix-profile/share/info/"))
#+end_src

** LaTeX Mode
#+begin_src emacs-lisp
(use-package tex-mode
  :init
    (add-hook 'latex-mode-hook 'flycheck-mode)
    (add-hook 'latex-mode-hook 'flyspell-mode)
    (add-hook 'latex-mode-hook 'turn-on-reftex)
    (add-hook 'latex-mode-hook
      (lambda ()
        (latex-prettify)
        (prettify-symbols-mode 1))))

(defun latex-prettify ()
  (dolist (x '(("\\alpha" . ?α)
               ("\\beta" . ?β)
               ("\\gamma" . ?γ)
               ("\\Gamma" . ?Γ)
               ("\\delta" . ?δ)
               ("\\Delta" . ?Δ)
               ("\\epsilon" . ?ϵ)
               ("\\varepsilon" . ?ε)
               ("\\zeta" . ?ζ)
               ("\\eta" . ?η)
               ("\\theta" . ?θ)
               ("\\vartheta" . ?ϑ)
               ("\\Theta" . ?Θ)
               ("\\iota" . ?ι)
               ("\\kappa" . ?κ)
               ("\\lambda" . ?λ)
               ("\\Lambda" . ?Λ)
               ("\\mu" . ?μ)
               ("\\nu" . ?ν)
               ("\\xi" . ?ξ)
               ("\\Xi" . ?Ξ)
               ("\\pi" . ?π)
               ("\\varpi" . ?ϖ)
               ("\\Pi" . ?Π)
               ("\\rho" . ?ρ)
               ("\\varrho" . ?ϱ)
               ("\\sigma" . ?σ)
               ("\\varsigma" . ?ς)
               ("\\Sigma" . ?Σ)
               ("\\tau" . ?τ)
               ("\\upsilon" . ?υ)
               ("\\Upsilon" . ?ϒ)
               ("\\phi" . ?ϕ)
               ("\\varphi" . ?φ)
               ("\\Phi" . ?Φ)
               ("\\psi" . ?ψ)
               ("\\Psi" . ?Ψ)
               ("\\omega" . ?ω)
               ("\\Omega" . ?Ω)))
    (push x prettify-symbols-alist)))
#+end_src

** Magit
#+begin_src emacs-lisp
(use-package magit
  :bind
    ("C-x s" . magit-status))
#+end_src

** NixOS
#+begin_src emacs-lisp
(use-package nix-mode)

(use-package nixos
  :init
    (setq nixos-nixpkgs-path nil))
#+end_src

** Org Mode
Keybindings that I cannot remember. Hopefully this list
gets shorter over time.

S-TAB          Global Cycling
C-u C-u TAB    Startup visibility
C-c C-n        Next Heading
C-c C-p        Previouse Heading
C-RET          Insert Heading
M-S-RET        Insert TODO
M-left         Demote Heading
M-right        Promote Heading
M-S-left       Demote Subtree
M-S-right      Promote Subtree
M-h            Mark element
C-c ^          Sort

#+begin_src emacs-lisp
(use-package org
  :bind
    ("C-c l" . org-store-link)
    ("C-c a" . org-agenda)
    ("C-c c" . org-capture)
    ("C-c b" . org-iswitchb))
#+end_src

** Rainbow delimiter
#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :ensure t
  :diminish rainbow-delimiters-mode
  :init
    (add-hook 'emacs-lisp-mode-hook
              'rainbow-delimiters-mode))
#+end_src

** Smart Parens
#+begin_src emacs-lisp
(use-package smartparens
  :diminish smartparens-mode
  :config
    (require 'smartparens-config)
    (sp-use-smartparens-bindings)
    (sp-local-pair 'emacs-lisp-mode "'" nil :actions nil)
    (add-hook 'emacs-lisp-mode-hook
              'smartparens-strict-mode))
#+end_src

** Speedbar
#+begin_src emacs-lisp
(require 'speedbar)
(speedbar-add-supported-extension ".hs")
#+end_src

** Twittering Mode
#+begin_src emacs-lisp
(use-package twittering-mode
  :init
    (advice-add 'twittering-capable-of-encryption-p
      :around (lambda (fun &rest args) t))
    (setq twittering-use-master-password t
          twittering-username "svenkeidel@gmail.com"))
#+end_src

** W3M
#+begin_src emacs-lisp
(use-package w3m
  :commands (w3m-browse-url)
  :init (setq browse-url-browser-function 'w3m-browse-url))
#+end_src

** Winner Mode
#+begin_src emacs-lisp
(winner-mode 1)
#+end_src

** Whitespace Config
#+begin_src emacs-lisp
(use-package whitespace
  :ensure t
  :diminish global-whitespace-mode
  :init
    (progn
      (setq whitespace-line-column 80)
      (setq whitespace-style '(face empty tabs lines-tail trailing))
      (setq-default indent-tabs-mode nil))
  :config
    (global-whitespace-mode 1))
#+end_src
